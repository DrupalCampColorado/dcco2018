<?php

/**
 * Use this file to override Drupal's default HTML output
 *
 * 1. Preprocess hooks
 * 2. Theme suggestions
 * 3. Utility functions
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\views\Views;

//*********************************************
// 1. Preprocess hooks
//*********************************************

/**
 * Implements template_preprocess_page().
 */
function themekit_preprocess_page(&$variables) {
}

/**
 * Implements template_preprocess_user().
 */
function themekit_preprocess_user(&$variables) {
  $variables['current_user'] = \Drupal::currentUser();
}

/**
 * Implements template_preprocess_node().
 */
function themekit_preprocess_node(&$variables) {
  $node = $variables['node'];
  $type = $node->getType();
  $view_mode = $variables['view_mode'];

  // Set our own node type preprocess, drupal creates them by default, but seems to only run hook_preprocess_node__event
  // on event full pages, not event teasers as well
  if (!empty($variables['node']) && is_object($variables['node']) && method_exists($variables['node'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['node']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }

  switch ($type) {
    case 'blog':
      $created = $node->getCreatedTime();
      $variables['day'] = date('d', $created);
      $variables['month'] = date('M', $created);
      $variables['year'] = date('Y', $created);
      break;
  }
}


/**
 * Implements template_preprocess_block().
 */
function themekit_preprocess_block(&$variables) {
  $id = $variables['plugin_id'];

  // Get bundle for styling purposes
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $variables['attributes']['class'][] = $bundle;
  }

  switch ($id) {
    case 'page_title_block':
      // Get an array of any passed in parameter objects.
      $route_parameters = \Drupal::routeMatch()->getParameters();
      $parameters = reset($route_parameters);

      foreach ($parameters as $name => $parameter) {
        // Skip non entity parameters.
        if (!$parameter instanceof EntityInterface) { continue; }

        $entity_id = $parameter->getEntityTypeId();

        if ($entity_id == 'node' && $parameter->getType() == 'blog') {
          $variables['date'] = date('M d, Y', $parameter->getCreatedTime());
        }

        if ($entity_id == 'user' && $parameter->hasField('field_profile_name')) {
          // Use the real name as the block title if it's filled out. If not
          // leave it as the user name.
          $profile_name = $parameter->get('field_profile_name')->getValue();
          if (!empty($profile_name)) {
            $variables['content']['#title'] = $parameter->field_profile_name->view('default');
          }
        }
      }
      break;
  }
}

/**
 * Implements template_preprocess_field().
 */
function themekit_preprocess_field(&$variables) {
  $element = $variables['element'];

  switch ($variables['field_name']) {
    case 'field_svg':
      $variables['svg_url'] = null;
      $svg_file_entity = $variables['element'][0]['#file'];

      if (is_object($svg_file_entity) && method_exists($svg_file_entity, 'getFileUri')) {
        $variables['svg_url'] = file_create_url($svg_file_entity->getFileUri());
      }
      break;
    case 'field_sponsor_tier_spots':
      // Override -1 values to be unlimited.
      foreach ($element['#items']->getValue() as $key => $value) {
        if ($value['value'] < 0) {
          $variables['items'][$key]['content'] = [
            '#markup' => t('Unlimited'),
          ];
        }
      }
      break;
    case 'field_profile_org':
      $user = $element['#object'];

      // Wrap the company name in a link if the field has a value.
      $org_link_items = $user->get('field_profile_org_website')->getValue();
      $org_link = reset($org_link_items);

      if (!empty($org_link) && $element['#view_mode'] == 'full') {
        foreach ($variables['items'] as &$item) {
          $item['content'] = [
            '#markup' => Link::fromTextAndUrl(
              $item['content']['#context']['value'],
              Url::fromUri($org_link['uri'])
            )->toString(),
          ];
        }
      }
      break;

    case 'field_sponsor_logo':
      $node = $element['#object'];
      $sponsor_ids = array_map(function ($item) {
        return $item['target_id'];
      }, $node->get('field_sponsor_tier')->getValue());

      // Array of sponsor IDs who's logos link to their website and not a bio
      // page.
      $bypass_page_sponsors = ['3', '22', '23', '24'];
      $overriden_sponsors = array_intersect($bypass_page_sponsors, $sponsor_ids);

      if (!empty($overriden_sponsors)) {
        $sponsor_link = $node->get('field_sponsor_url')->getValue();

        if (!empty($sponsor_link)) {
          $sponsor_link = reset($sponsor_link);

          foreach ($variables['items'] as &$item) {
            $item['content']['#url'] = Url::fromUri($sponsor_link['uri']);
          }
        }
      }
      break;
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function themekit_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  $bundle = $paragraph->bundle();

  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  switch ($bundle) {
    case 'reference_block':
    case 'simple_content':
    case 'simple_testimonial':
      if (isset($paragraph->field_background_color) && $paragraph->field_background_color->getValue()) {
        $color = $paragraph->field_background_color->entity->getName();
        $variables['attributes']['class'][] = 'color-scheme--' . strtolower($color);
      }
      break;
  }

  if ($bundle == 'simple_content') {
    $heading = isset($paragraph->field_heading) ? $paragraph->field_heading->getValue() : null;
    $icon = isset($paragraph->field_icon) ? $paragraph->field_svg->getValue() : null;
    $text = isset($paragraph->field_text_area) ? $paragraph->field_text_area->getValue() : null;
    $link = isset($paragraph->field_cta) ? $paragraph->field_cta->getValue() : null;
    $arrow = isset($paragraph->field_arrow_down) ? $paragraph->field_arrow_down->getValue() : null;

    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], [
      !$heading && !$icon && $link && $text ? 'large-text' : '',
      !$icon && !$link && $heading && $text ? 'medium-text'  : '',
      $arrow && (Int)$arrow[0]['value'] ? 'arrow' : '',
    ]);
  }
}

/**
 * Implements template_preprocess_node_article().
 */
function themekit_preprocess_node_article(&$variables) {
}


/**
 * Implements template_preprocess_media().
 */
function themekit_preprocess_media__svg(&$variables) {

  if (!empty($variables['content']['field_svg'])) {
    $svg_file_entity = $variables['content']['field_svg']['0']['#file'];
    if (is_object($svg_file_entity) && method_exists($svg_file_entity, 'getFileUri')) {
      $variables['svg_url'] = file_create_url($svg_file_entity->getFileUri());
    }
  }
}

/**
 * Implements template_preprocess_commerce_checkout_completion_message().
 */
function themekit_preprocess_commerce_checkout_completion_message(&$variables) {
  // Add the current user data to template if we're logged in.
  if ($variables['logged_in']) {
    $variables['current_user'] = \Drupal::currentUser();
  }

  // Add order information to the order summary.
  $variables['order_summary'] = [
    '#type' => 'view',
    '#name' => 'commerce_checkout_order_summary',
    '#arguments' => [$variables['order_entity']->id()],
    '#embed' => TRUE,
  ];

  // $variables['order_price'] = $order->getTotalPrice();
}


//*********************************************
// 2. Theme suggestions
//*********************************************

/**
 * Implements template_theme_suggestions_taxonomy_term_alter().
 */
function themekit_theme_suggestions_taxonomy_term_alter(&$suggestions, $variables) {
  $element = $variables['elements'];
  $entity = $element['#taxonomy_term'];
  $suggestions[] = "taxonomy_term__{$entity->bundle()}__{$element['#view_mode']}";
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_user_alter(&$suggestions, $variables) {
  $element = $variables['elements'];

  $suggestions[] = "user__{$element['#view_mode']}";
}

/**
 * Implements theme_theme_suggestions_views_view_alter().
 */
function themekit_theme_suggestions_views_view_alter(&$suggestions, $variables) {
  $view = $variables['view'];
  $display = $view->getDisplay();

  $suggestions[] = "views_view__{$view->id()}";
  $suggestions[] = "views_view__{$view->id()}__{$display->getPluginId()}";
}

/**
 * Implements theme_theme_suggestions_views_view_unformatted_alter().
 */
function themekit_theme_suggestions_views_view_unformatted_alter(&$suggestions, $variables) {
  $view = $variables['view'];
  $display = $view->getDisplay();

  $suggestions[] = "views_view_unformatted__{$view->id()}";
  $suggestions[] = "views_view_unformatted__{$view->id()}__{$display->getPluginId()}";
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = !empty($variables['element']['#field_name']) ? $variables['element']['#field_name'] : '';
  $type = !empty($variables['element']['#entity_type']) ? $variables['element']['#entity_type'] : '';
  $bundle = !empty($variables['element']['#bundle']) ? $variables['element']['#bundle'] : '';
  $is_paragraph = ($type == 'paragraph');

  // Apply theme suggestions based on field name.
  switch($field_name) {
    case 'field_p_content':
    case 'field_p_header':
    case 'field_p_promo_content':
      // Remove all field markup so only the field value markup is output.
      array_unshift($suggestions, 'field__no_wrapper');
      break;
    case 'field_p_column':
      // Remove field item wrappers.
      array_unshift($suggestions, 'field__reset');
      break;
  }

  // Apply theme suggestions for "field_heading" based on paragraph bundle.
  if ($field_name == 'field_heading' && $is_paragraph) {
    switch($bundle) {
      case 'layout_component_group':
        array_unshift($suggestions, 'field__heading_2');
        break;
      case 'banner_standard':
      case 'single_heading':
      case 'simple_content':
        array_unshift($suggestions, 'field__heading_3');
        break;
    }
  }

  switch ($type) {
    case 'contact_message':
      $suggestions[] = 'field__' . $type;
      $suggestions[] = 'field__' . $type . '__' . $variables['element']['#field_type'];
      break;
  }
}

//*********************************************
// 3. Utility functions
//*********************************************

/**
 * Utility function to get the inline css style for a background image.
 *
 * @param $entity
 *  Entity containing the image field.
 * @param $field_name
 *  Name of the image field to use.
 * @param $image_style
 *  Name of the image style to use.
 * @return string
 *  Full css style attribute containing background image.
 */
function themekit_get_entity_image_inline_style($entity, $field_name, $image_style = null) {
  $rendered_style = '';

  if (!$entity->$field_name->isEmpty()) {
    $file_entity = $entity->get($field_name)->entity->get('field_image')->entity;

    if ($url = themekit_get_image_style_url($file_entity, $image_style)) {
      $rendered_style = 'style="background-image: url(' . $url . ');"';
    }
  }

  return $rendered_style;
}

/**
 * Get the url for a specific image style of an image.
 *
 * @param File $file
 *  Image to be used.
 * @param $image_style
 *  Name of the image style to use.
 * @return string
 */
function themekit_get_image_style_url(File $file, $image_style) {
  $uri = $file->getFileUri();
  if ($image_style) {
    $url = ImageStyle::load($image_style)->buildUrl($uri);
  } else {
    $url = file_create_url($uri);
  }
  return $url;
}


/**
 * Get a renderable array from a block ID
 *
 * @param $block_id
 * @param null $weight
 *  Optional weight parameter, useful if you are dumping this into a region and need to negotiate its position
 * @return array
 */
function themekit_block_to_renderable_array($block_id, $weight = null) {
  $block = Block::load($block_id);
  if (is_null($block)) return [];
  $block_content = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  // set weight
  if (isset($weight)) {
    $block_content['#weight'] = $weight;
  }

  return $block_content;
}


/**
 * Utility function to create a renderable array from a view
 *
 * @param $view_id
 *  The view machine name id
 * @param $view_display
 *  The display machine name id
 * @param null $view_title
 *  Optionally add the view title
 *
 * @return mixed
 *  The view as a renderable array
 */
function themekit_view_to_renderable_array($view_id, $view_display, $view_title = null) {
  // set title
  $view = Views::getView($view_id);
  $view->setDisplay($view_display);

  if (isset($view_title)) {
    $view_content['title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => $view->getTitle(),
      '#attributes' => [
        'class' => 'view-title',
      ],
    ];
  }
  $view_content['content'] = views_embed_view($view_id, $view_display);

  return $view_content;
}
